-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PortfolioData.Object.Experiences exposing (ExperienceClassificationsOptionalArguments, company_name, end_date, experience_classifications, id, role, start_date)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import PortfolioData.Enum.Experience_classifications_select_column
import PortfolioData.InputObject
import PortfolioData.Interface
import PortfolioData.Object
import PortfolioData.Scalar
import PortfolioData.ScalarCodecs
import PortfolioData.Union


company_name : SelectionSet (Maybe String) PortfolioData.Object.Experiences
company_name =
    Object.selectionForField "(Maybe String)" "company_name" [] (Decode.string |> Decode.nullable)


end_date : SelectionSet (Maybe PortfolioData.ScalarCodecs.Date) PortfolioData.Object.Experiences
end_date =
    Object.selectionForField "(Maybe ScalarCodecs.Date)" "end_date" [] (PortfolioData.ScalarCodecs.codecs |> PortfolioData.Scalar.unwrapCodecs |> .codecDate |> .decoder |> Decode.nullable)


type alias ExperienceClassificationsOptionalArguments =
    { distinct_on : OptionalArgument (List PortfolioData.Enum.Experience_classifications_select_column.Experience_classifications_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List PortfolioData.InputObject.Experience_classifications_order_by)
    , where_ : OptionalArgument PortfolioData.InputObject.Experience_classifications_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
experience_classifications : (ExperienceClassificationsOptionalArguments -> ExperienceClassificationsOptionalArguments) -> SelectionSet decodesTo PortfolioData.Object.Experience_classifications -> SelectionSet (List decodesTo) PortfolioData.Object.Experiences
experience_classifications fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum PortfolioData.Enum.Experience_classifications_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (PortfolioData.InputObject.encodeExperience_classifications_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ PortfolioData.InputObject.encodeExperience_classifications_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "experience_classifications" optionalArgs object_ (identity >> Decode.list)


id : SelectionSet Int PortfolioData.Object.Experiences
id =
    Object.selectionForField "Int" "id" [] Decode.int


role : SelectionSet (Maybe String) PortfolioData.Object.Experiences
role =
    Object.selectionForField "(Maybe String)" "role" [] (Decode.string |> Decode.nullable)


start_date : SelectionSet PortfolioData.ScalarCodecs.Date PortfolioData.Object.Experiences
start_date =
    Object.selectionForField "ScalarCodecs.Date" "start_date" [] (PortfolioData.ScalarCodecs.codecs |> PortfolioData.Scalar.unwrapCodecs |> .codecDate |> .decoder)

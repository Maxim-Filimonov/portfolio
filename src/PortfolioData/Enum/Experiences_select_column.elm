-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PortfolioData.Enum.Experiences_select_column exposing (Experiences_select_column(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "experiences"

  - Company\_name - column name
  - End\_date - column name
  - Id - column name
  - Role - column name
  - Start\_date - column name

-}
type Experiences_select_column
    = Company_name
    | End_date
    | Id
    | Role
    | Start_date


list : List Experiences_select_column
list =
    [ Company_name, End_date, Id, Role, Start_date ]


decoder : Decoder Experiences_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "company_name" ->
                        Decode.succeed Company_name

                    "end_date" ->
                        Decode.succeed End_date

                    "id" ->
                        Decode.succeed Id

                    "role" ->
                        Decode.succeed Role

                    "start_date" ->
                        Decode.succeed Start_date

                    _ ->
                        Decode.fail ("Invalid Experiences_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Experiences_select_column -> String
toString enum =
    case enum of
        Company_name ->
            "company_name"

        End_date ->
            "end_date"

        Id ->
            "id"

        Role ->
            "role"

        Start_date ->
            "start_date"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Experiences_select_column
fromString enumString =
    case enumString of
        "company_name" ->
            Just Company_name

        "end_date" ->
            Just End_date

        "id" ->
            Just Id

        "role" ->
            Just Role

        "start_date" ->
            Just Start_date

        _ ->
            Nothing

-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PortfolioData.Scalar exposing (Codecs, Date(..), Id(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Date
    = Date String


type Id
    = Id String


defineCodecs :
    { codecDate : Codec valueDate
    , codecId : Codec valueId
    }
    -> Codecs valueDate valueId
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueDate valueId
    ->
        { codecDate : Codec valueDate
        , codecId : Codec valueId
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueDate valueId
    = Codecs (RawCodecs valueDate valueId)


type alias RawCodecs valueDate valueId =
    { codecDate : Codec valueDate
    , codecId : Codec valueId
    }


defaultCodecs : RawCodecs Date Id
defaultCodecs =
    { codecDate =
        { encoder = \(Date raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Date
        }
    , codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    }
